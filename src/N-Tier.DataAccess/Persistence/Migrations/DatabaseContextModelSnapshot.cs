// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using N_Tier.DataAccess.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace N_Tier.DataAccess.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttendanceStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AttendanceStatusId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceStatusId1");

                    b.HasIndex("StudentId1");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.AttendanceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttendanceStatus");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PositionId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId1");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventGuest")
                        .HasColumnType("text");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.EventParticipants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EventId1")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId1");

                    b.HasIndex("PersonId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.EventRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EventId1")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfPlaces")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId1");

                    b.HasIndex("RoomId1");

                    b.ToTable("EventRoom");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SuperVisor")
                        .HasColumnType("text");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamBall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ball")
                        .HasColumnType("integer");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uuid");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId1");

                    b.HasIndex("StudentId1");

                    b.ToTable("ExamBall");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uuid");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId1");

                    b.HasIndex("GroupId1");

                    b.ToTable("ExamGroup");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamGroupRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ExamGroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ExamGroupId1")
                        .HasColumnType("uuid");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamGroupId1");

                    b.HasIndex("RoomId1");

                    b.ToTable("ExamGroupRoom");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.GroupRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uuid");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LessonId1")
                        .HasColumnType("uuid");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeacherId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId1");

                    b.HasIndex("LessonId1");

                    b.HasIndex("RoomId1");

                    b.HasIndex("TeacherId1");

                    b.ToTable("GroupRoom");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Specialist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId1");

                    b.HasIndex("PersonId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SpecialistId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialistId1");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.TodoList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.TotalNumberOfEventParticipants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TotalNumberOfEventParticipants");
                });

            modelBuilder.Entity("N_Tier.DataAccess.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("N_Tier.DataAccess.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("N_Tier.DataAccess.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N_Tier.DataAccess.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("N_Tier.DataAccess.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Attendance", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.AttendanceStatus", "AttendanceStatus")
                        .WithMany()
                        .HasForeignKey("AttendanceStatusId1");

                    b.HasOne("N_Tier.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");

                    b.Navigation("AttendanceStatus");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Employee", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N_Tier.Core.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId1");

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.EventParticipants", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId1");

                    b.HasOne("N_Tier.Core.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.EventRoom", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId1");

                    b.HasOne("N_Tier.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId1");

                    b.Navigation("Event");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamBall", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId1");

                    b.HasOne("N_Tier.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamGroup", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId1");

                    b.HasOne("N_Tier.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId1");

                    b.Navigation("Exam");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.ExamGroupRoom", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.ExamGroup", "ExamGroup")
                        .WithMany()
                        .HasForeignKey("ExamGroupId1");

                    b.HasOne("N_Tier.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId1");

                    b.Navigation("ExamGroup");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.GroupRoom", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId1");

                    b.HasOne("N_Tier.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId1");

                    b.HasOne("N_Tier.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId1");

                    b.HasOne("N_Tier.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId1");

                    b.Navigation("Group");

                    b.Navigation("Lesson");

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Student", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId1");

                    b.HasOne("N_Tier.Core.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.Teacher", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N_Tier.Core.Entities.Specialist", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistId1");

                    b.Navigation("Person");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.TodoItem", b =>
                {
                    b.HasOne("N_Tier.Core.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("List");
                });

            modelBuilder.Entity("N_Tier.Core.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
